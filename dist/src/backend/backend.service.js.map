{"version":3,"sources":["../../../src/backend/backend.service.ts"],"names":[],"mappings":"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","file":"backend.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Type } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ResponseAll } from './response-all';\r\n\r\n\r\nexport class BackendService {\r\n    \r\n    http: Http;\r\n    headers: Headers;\r\n    queryString: Array<string> = [];\r\n\r\n    constructor(http: Http) {\r\n        this.http = http;\r\n        this.headers = new Headers();\r\n        this.headers.append('Content-Type', 'application/json');\r\n    }\r\n\r\n    private addHeaders(headers: any): void {\r\n        for(var h in headers) {\r\n            if (headers[h]) {\r\n                this.headers.append(h, headers[h]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addQueryString(queryString: any): void {\r\n        this.queryString = [];\r\n        for(var p in queryString) {\r\n            if (queryString[p])\r\n                this.queryString.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(queryString[p]));\r\n        }\r\n    }\r\n\r\n    private getQueryString(): string {\r\n        return (\r\n                this.queryString.join(\"&\") ? \r\n                    \"?\" + this.queryString.join(\"&\") \r\n                    : \"\"\r\n            );\r\n    }\r\n\r\n    private getUrl(url: string): string {\r\n        return url + this.getQueryString();\r\n    }\r\n\r\n    getAll(url: string, queryString?: any, headers?: any): Observable<ResponseAll> {\r\n\r\n        this.addQueryString(queryString);\r\n        this.addHeaders(headers);\r\n\r\n        return this.http\r\n                   .get(this.getUrl(url), { headers: this.headers })\r\n                   .map(res => res.json());\r\n    }\r\n\r\n    getOne(url: string, queryString?: any, headers?: any): Observable<Response> {\r\n        \r\n        this.addQueryString(queryString);\r\n        this.addHeaders(headers);\r\n\r\n        return this.http\r\n                   .get(this.getUrl(url), { headers: this.headers })\r\n                   .map(res => res.json());\r\n    }\r\n\r\n    post(url: string, body: Object, queryString?: any, headers?: any): Observable<Response> {\r\n        \r\n        this.addQueryString(queryString);\r\n        this.addHeaders(headers);\r\n\r\n        return this.http\r\n                    .post(this.getUrl(url), JSON.stringify(body), { headers: this.headers });\r\n    }\r\n\r\n    put(url: string, body: Object, queryString?: any, headers?: any): Observable<Response> {\r\n        \r\n        this.addQueryString(queryString);\r\n        this.addHeaders(headers);\r\n\r\n        return this.http\r\n                   .put(this.getUrl(url), JSON.stringify(body), {headers: this.headers});\r\n    }\r\n\r\n    delete(url: string, queryString?: any, headers?: any):  Observable<Response>  {\r\n        \r\n        this.addQueryString(queryString);\r\n        this.addHeaders(headers);\r\n\r\n        return this.http\r\n                    .delete(this.getUrl(url));\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}